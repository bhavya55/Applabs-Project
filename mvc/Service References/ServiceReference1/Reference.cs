//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace mvc.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IMyservice")]
    public interface IMyservice {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyservice/GetAllEmployers", ReplyAction="http://tempuri.org/IMyservice/GetAllEmployersResponse")]
        wcf.Employer[] GetAllEmployers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyservice/GetAllEmployers", ReplyAction="http://tempuri.org/IMyservice/GetAllEmployersResponse")]
        System.Threading.Tasks.Task<wcf.Employer[]> GetAllEmployersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyservice/GetAllMarketers", ReplyAction="http://tempuri.org/IMyservice/GetAllMarketersResponse")]
        wcf.Marketing[] GetAllMarketers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyservice/GetAllMarketers", ReplyAction="http://tempuri.org/IMyservice/GetAllMarketersResponse")]
        System.Threading.Tasks.Task<wcf.Marketing[]> GetAllMarketersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyservice/AddEmp", ReplyAction="http://tempuri.org/IMyservice/AddEmpResponse")]
        int AddEmp(int id, string Fname, string Lname, string instructor, System.DateTime optstartdate, string technology, bool isconsultant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyservice/AddEmp", ReplyAction="http://tempuri.org/IMyservice/AddEmpResponse")]
        System.Threading.Tasks.Task<int> AddEmpAsync(int id, string Fname, string Lname, string instructor, System.DateTime optstartdate, string technology, bool isconsultant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyservice/AddMark", ReplyAction="http://tempuri.org/IMyservice/AddMarkResponse")]
        int AddMark(int Eid, System.DateTime optstartdate, int mid, string optstatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyservice/AddMark", ReplyAction="http://tempuri.org/IMyservice/AddMarkResponse")]
        System.Threading.Tasks.Task<int> AddMarkAsync(int Eid, System.DateTime optstartdate, int mid, string optstatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyservice/GetAllemployerByid", ReplyAction="http://tempuri.org/IMyservice/GetAllemployerByidResponse")]
        wcf.Employer GetAllemployerByid(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyservice/GetAllemployerByid", ReplyAction="http://tempuri.org/IMyservice/GetAllemployerByidResponse")]
        System.Threading.Tasks.Task<wcf.Employer> GetAllemployerByidAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyservice/GetAllMarketerByid", ReplyAction="http://tempuri.org/IMyservice/GetAllMarketerByidResponse")]
        wcf.Marketing GetAllMarketerByid(int Eid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyservice/GetAllMarketerByid", ReplyAction="http://tempuri.org/IMyservice/GetAllMarketerByidResponse")]
        System.Threading.Tasks.Task<wcf.Marketing> GetAllMarketerByidAsync(int Eid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyservice/UpdateEmp", ReplyAction="http://tempuri.org/IMyservice/UpdateEmpResponse")]
        int UpdateEmp(int id, string Fname, string Lname, string instructor, System.DateTime optstartdate, string technology, bool isconsultant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyservice/UpdateEmp", ReplyAction="http://tempuri.org/IMyservice/UpdateEmpResponse")]
        System.Threading.Tasks.Task<int> UpdateEmpAsync(int id, string Fname, string Lname, string instructor, System.DateTime optstartdate, string technology, bool isconsultant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyservice/UpdateMark", ReplyAction="http://tempuri.org/IMyservice/UpdateMarkResponse")]
        int UpdateMark(int Eid, System.DateTime optstartdate, int mid, string optstatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyservice/UpdateMark", ReplyAction="http://tempuri.org/IMyservice/UpdateMarkResponse")]
        System.Threading.Tasks.Task<int> UpdateMarkAsync(int Eid, System.DateTime optstartdate, int mid, string optstatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyservice/DeleteEmpByid", ReplyAction="http://tempuri.org/IMyservice/DeleteEmpByidResponse")]
        int DeleteEmpByid(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyservice/DeleteEmpByid", ReplyAction="http://tempuri.org/IMyservice/DeleteEmpByidResponse")]
        System.Threading.Tasks.Task<int> DeleteEmpByidAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyservice/DeleteMarkByEid", ReplyAction="http://tempuri.org/IMyservice/DeleteMarkByEidResponse")]
        int DeleteMarkByEid(int mid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyservice/DeleteMarkByEid", ReplyAction="http://tempuri.org/IMyservice/DeleteMarkByEidResponse")]
        System.Threading.Tasks.Task<int> DeleteMarkByEidAsync(int mid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMyserviceChannel : mvc.ServiceReference1.IMyservice, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyserviceClient : System.ServiceModel.ClientBase<mvc.ServiceReference1.IMyservice>, mvc.ServiceReference1.IMyservice {
        
        public MyserviceClient() {
        }
        
        public MyserviceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MyserviceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyserviceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyserviceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public wcf.Employer[] GetAllEmployers() {
            return base.Channel.GetAllEmployers();
        }
        
        public System.Threading.Tasks.Task<wcf.Employer[]> GetAllEmployersAsync() {
            return base.Channel.GetAllEmployersAsync();
        }
        
        public wcf.Marketing[] GetAllMarketers() {
            return base.Channel.GetAllMarketers();
        }
        
        public System.Threading.Tasks.Task<wcf.Marketing[]> GetAllMarketersAsync() {
            return base.Channel.GetAllMarketersAsync();
        }
        
        public int AddEmp(int id, string Fname, string Lname, string instructor, System.DateTime optstartdate, string technology, bool isconsultant) {
            return base.Channel.AddEmp(id, Fname, Lname, instructor, optstartdate, technology, isconsultant);
        }
        
        public System.Threading.Tasks.Task<int> AddEmpAsync(int id, string Fname, string Lname, string instructor, System.DateTime optstartdate, string technology, bool isconsultant) {
            return base.Channel.AddEmpAsync(id, Fname, Lname, instructor, optstartdate, technology, isconsultant);
        }
        
        public int AddMark(int Eid, System.DateTime optstartdate, int mid, string optstatus) {
            return base.Channel.AddMark(Eid, optstartdate, mid, optstatus);
        }
        
        public System.Threading.Tasks.Task<int> AddMarkAsync(int Eid, System.DateTime optstartdate, int mid, string optstatus) {
            return base.Channel.AddMarkAsync(Eid, optstartdate, mid, optstatus);
        }
        
        public wcf.Employer GetAllemployerByid(int id) {
            return base.Channel.GetAllemployerByid(id);
        }
        
        public System.Threading.Tasks.Task<wcf.Employer> GetAllemployerByidAsync(int id) {
            return base.Channel.GetAllemployerByidAsync(id);
        }
        
        public wcf.Marketing GetAllMarketerByid(int Eid) {
            return base.Channel.GetAllMarketerByid(Eid);
        }
        
        public System.Threading.Tasks.Task<wcf.Marketing> GetAllMarketerByidAsync(int Eid) {
            return base.Channel.GetAllMarketerByidAsync(Eid);
        }
        
        public int UpdateEmp(int id, string Fname, string Lname, string instructor, System.DateTime optstartdate, string technology, bool isconsultant) {
            return base.Channel.UpdateEmp(id, Fname, Lname, instructor, optstartdate, technology, isconsultant);
        }
        
        public System.Threading.Tasks.Task<int> UpdateEmpAsync(int id, string Fname, string Lname, string instructor, System.DateTime optstartdate, string technology, bool isconsultant) {
            return base.Channel.UpdateEmpAsync(id, Fname, Lname, instructor, optstartdate, technology, isconsultant);
        }
        
        public int UpdateMark(int Eid, System.DateTime optstartdate, int mid, string optstatus) {
            return base.Channel.UpdateMark(Eid, optstartdate, mid, optstatus);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMarkAsync(int Eid, System.DateTime optstartdate, int mid, string optstatus) {
            return base.Channel.UpdateMarkAsync(Eid, optstartdate, mid, optstatus);
        }
        
        public int DeleteEmpByid(int id) {
            return base.Channel.DeleteEmpByid(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteEmpByidAsync(int id) {
            return base.Channel.DeleteEmpByidAsync(id);
        }
        
        public int DeleteMarkByEid(int mid) {
            return base.Channel.DeleteMarkByEid(mid);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMarkByEidAsync(int mid) {
            return base.Channel.DeleteMarkByEidAsync(mid);
        }
    }
}
